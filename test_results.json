[
  {
    "test_name": "test_home_landing_login",
    "status": "FAIL",
    "message": "tests\\test_home_landing_login.py:37: AssertionError",
    "timestamp": "2025-06-16 11:15:40",
    "file": "tests/test_home_landing_login.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Home\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_home_landing_login.py FF                                      [100%]\n\n================================== FAILURES ===================================\n______________________ test_logged_in_pc[Windows Chrome] ______________________\n\npage = <Page url='https://stg.ceramiqueclinic.com/ko'>\n\n    @pytest.mark.playwright\n    def test_logged_in_pc(page):\n        # 로그인 상태로 메인 화면 진입\n        login_with_token(page, account_type=\"kakao\")\n    \n        # 햄버거 메뉴 클릭하여 전체 메뉴 항목 확인\n        page.locator('[data-testid=\"header_menu\"]').click()\n        page.wait_for_timeout(3000)\n    \n        # 로그인 상태에서 보여야 하는 메뉴 항목과 상태 확인\n        menu_items = [\n            ('discover', URLS[\"home_discover\"]),\n            ('removal', URLS[\"home_removal\"]),\n            ('lifting', URLS[\"home_lifting\"]),\n            ('privilege', URLS[\"home_privilege\"]),\n            ('mypage', URLS[\"home_mypage_mem\"]),\n            ('logout', URLS[\"home_main\"]),\n        ]\n    \n        for item, expected_url in menu_items:\n>           select_menu_and_verify_page(page, item, expected_url)\n\ntests\\test_home_landing_login.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.ceramiqueclinic.com/ko'>, menu_item = 'discover'\nexpected_url = 'https://stg.ceramiqueclinic.com/discover'\n\n    def select_menu_and_verify_page(page, menu_item, expected_url):\n        page.locator(f'[data-testid=\"menu_{menu_item}\"]').click()  # 메뉴 항목을 클릭\n        page.wait_for_load_state('load')  # 페이지가 완전히 로딩될 때까지 기다림\n>       assert page.url == expected_url, f\"\\u274c URL mismatch: {page.url} != {expected_url}\"\nE       AssertionError: \\u274c URL mismatch: https://stg.ceramiqueclinic.com/ko != https://stg.ceramiqueclinic.com/discover\nE       assert 'https://stg....clinic.com/ko' == 'https://stg.....com/discover'\nE         \nE         - https://stg.ceramiqueclinic.com/discover\nE         ?                                 ^^^^ ---\nE         + https://stg.ceramiqueclinic.com/ko\nE         ?                                 ^\n\ntests\\test_home_landing_login.py:37: AssertionError\n____________________ test_logged_in_mobile[Windows Chrome] ____________________\n\npage = <Page url='https://stg.ceramiqueclinic.com/ko'>\n\n    @pytest.mark.playwright\n    def test_logged_in_mobile(page):\n        # 로그인 상태로 메인 화면 진입\n        login_with_token(page, account_type=\"kakao\")\n    \n        # 햄버거 메뉴 클릭하여 전체 메뉴 항목 확인\n        page.locator('[data-testid=\"header_menu\"]').click()\n        page.wait_for_timeout(2000)\n    \n        # 로그인 상태에서 보여야 하는 메뉴 항목과 상태 확인\n        menu_items = [\n            ('discover', URLS[\"home_discover\"]),\n            ('menu_removal', URLS[\"home_removal\"]),\n            ('menu_lifting', URLS[\"home_lifting\"]),\n            ('menu_privilege', URLS[\"home_privilege\"]),\n            ('menu_mypage', URLS[\"home_mypage_mo\"]),\n            ('menu_logout', URLS[\"home_main\"]),\n        ]\n    \n        for item, expected_url in menu_items:\n>           select_menu_and_verify_page(page, item, expected_url)\n\ntests\\test_home_landing_login.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.ceramiqueclinic.com/ko'>, menu_item = 'discover'\nexpected_url = 'https://stg.ceramiqueclinic.com/discover'\n\n    def select_menu_and_verify_page(page, menu_item, expected_url):\n        page.locator(f'[data-testid=\"menu_{menu_item}\"]').click()  # 메뉴 항목을 클릭\n        page.wait_for_load_state('load')  # 페이지가 완전히 로딩될 때까지 기다림\n>       assert page.url == expected_url, f\"\\u274c URL mismatch: {page.url} != {expected_url}\"\nE       AssertionError: \\u274c URL mismatch: https://stg.ceramiqueclinic.com/ko != https://stg.ceramiqueclinic.com/discover\nE       assert 'https://stg....clinic.com/ko' == 'https://stg.....com/discover'\nE         \nE         - https://stg.ceramiqueclinic.com/discover\nE         ?                                 ^^^^ ---\nE         + https://stg.ceramiqueclinic.com/ko\nE         ?                                 ^\n\ntests\\test_home_landing_login.py:37: AssertionError\n============================== warnings summary ===============================\ntests\\test_home_landing_login.py:53\n  c:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Home\\tests\\test_home_landing_login.py:53: PytestUnknownMarkWarning: Unknown pytest.mark.playwright - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.playwright\n\ntests\\test_home_landing_login.py:86\n  c:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Home\\tests\\test_home_landing_login.py:86: PytestUnknownMarkWarning: Unknown pytest.mark.playwright - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.playwright\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_home_landing_login.py::test_logged_in_pc[Windows Chrome] - ...\nFAILED tests/test_home_landing_login.py::test_logged_in_mobile[Windows Chrome]\n======================= 2 failed, 2 warnings in 17.66s ========================\n",
    "duration": "18.47초"
  },
  {
    "test_name": "test_home_landing_nologin",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-06-16 11:16:43",
    "file": "tests/test_home_landing_nologin.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Home\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_home_landing_nologin.py F                                     [100%]\n\n================================== FAILURES ===================================\n_____________________ test_non_logged_in[Windows Chrome] ______________________\n\npage = <Page url='https://stg.ceramiqueclinic.com/ko/login'>\ndevice_profile = {'device_scale_factor': 1, 'has_touch': False, 'is_mobile': False, 'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', ...}\n\n    def test_non_logged_in(page, device_profile):\n        is_mobile = device_profile[\"is_mobile\"]\n    \n        # 메인 페이지 진입\n        go_to_home_page(page, URLS[\"home_main\"])\n        page.wait_for_timeout(2000)\n    \n        # 메뉴 열기\n        page.locator('[data-testid=\"header_menu\"]').click()\n        page.wait_for_timeout(2000)\n        check_menu_visibility(page)\n    \n        # 메뉴 테스트\n        for key in MENU_META:\n            select_menu_and_verify_page(page, key, device_profile)\n            scroll_to_footer(page)\n            check_footer_elements(page)\n            # 화면 맨 위로 올리고 다음 메뉴를 위해 다시 메뉴 열기\n            page.evaluate(\"window.scrollTo(0, 0);\")\n            page.wait_for_timeout(500)\n            page.locator('[data-testid=\"header_menu\"]').click()\n            page.wait_for_timeout(2000)\n    \n>       click_float_button(page, is_mobile)\n\ntests\\test_home_landing_nologin.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_home_landing_nologin.py:44: in click_float_button\n    switch_language_to_english(page, is_mobile)\nhelpers\\homepage_utils.py:140: in switch_language_to_english\n    page.locator('[data-testid=\"drop_language\"]').click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001B217D94590>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001B2181C2FC0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"[data-testid=\\\"drop_language\\\"]\")\nE             -     - locator resolved to <button type=\"button\" data-testid=\"drop_language\" class=\"flex h-[30px] items-center gap-2 text-font-20-400\">…</button>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is visible, enabled and stable\nE             -       - scrolling into view if needed\nE             -       - done scrolling\nE             -       - <div class=\"relative flex h-[138px] items-center px-10\">…</div> from <div class=\"fixed left-0 top-0 z-50 w-full transition-transform duration-500 ease-in-out translate-y-0\">…</div> subtree intercepts pointer events\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is visible, enabled and stable\nE             -       - scrolling into view if needed\nE             -       - done scrolling\nE             -       - <div class=\"relative flex h-[138px] items-center px-10\">…</div> from <div class=\"fixed left-0 top-0 z-50 w-full transition-transform duration-500 ease-in-out translate-y-0\">…</div> subtree intercepts pointer events\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     56 × waiting for element to be visible, enabled and stable\nE             -        - element is visible, enabled and stable\nE             -        - scrolling into view if needed\nE             -        - done scrolling\nE             -        - <div class=\"relative flex h-[138px] items-center px-10\">…</div> from <div class=\"fixed left-0 top-0 z-50 w-full transition-transform duration-500 ease-in-out translate-y-0\">…</div> subtree intercepts pointer events\nE             -      - retrying click action\nE             -        - waiting 500ms\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_home_landing_nologin.py::test_non_logged_in[Windows Chrome]\n======================== 1 failed in 61.36s (0:01:01) =========================\n",
    "duration": "62.23초"
  }
]